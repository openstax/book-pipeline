<xsl:transform 

    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:j="http://www.w3.org/2005/xpath-functions"
    xmlns:h="http://www.w3.org/1999/xhtml"
    xmlns="http://www.w3.org/1999/xhtml"

    xmlns:c="http://cnx.rice.edu/cnxml"
    xmlns:data="http://www.w3.org/TR/html5/dom.html#custom-data-attribute"
    
    expand-text="yes"
    version="3.0">

    <xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />

    <xsl:param name="CODE_VERSION" as="xs:string"/>

    <!-- <xsl:template match="*[@data:interactive='coderunner-py']"> -->
    <xsl:template match="*[@data-interactive='coderunner-py']">
        <xsl:variable name="id" select="generate-id()"/>

        <xsl:variable name="filename">{$id}.json</xsl:variable>
        <xsl:variable name="json">
            <j:map>
                <j:number key="version">1</j:number>
                <j:string key="language">python</j:string>
                <j:string key="usage">coderunner</j:string>
                <j:string key="id">{@id}</j:string>
                <j:array key="tests">
                    <!-- Only one test for now -->
                    <j:map>
                        <j:array key="input">
                            <xsl:for-each select="*[@data-element-type='inputs']/h:li">
                                <j:string>{text()}</j:string>
                            </xsl:for-each>
                        </j:array>
                        <j:string key="output">
                            <xsl:value-of select="*[@data-element-type='output']"/>
                        </j:string>
                    </j:map>
                </j:array>
                <j:string key="initial">
                    <xsl:value-of select="*[@data-element-type='initial']"/>
                </j:string>
                <j:string key="solution">
                    <xsl:value-of select="*[@data-element-type='solution']"/>
                </j:string>
            </j:map>
        </xsl:variable>
        <xsl:message>Generating zybooks JSON file: {$filename}</xsl:message>
        <xsl:result-document href="{$filename}">
            <xsl:value-of select="xml-to-json($json, map{'indent':true()})" />
        </xsl:result-document>

        <xsl:copy>
            <!-- <xsl:attribute name="data:src">{$filename}</xsl:attribute> -->
            <xsl:attribute name="data-src">{$filename}</xsl:attribute>
            <xsl:apply-templates select="@*|node()"/>

            <div data-wrapper-for-responsiveness-key="yes">
                <iframe 
                    src="{$filename}"
                    data-prepend-url="/apps/coderunner-py/index.html"
                    data-querystring-param-name="src"
                    data-code-version="{$CODE_VERSION}"
                    />
            </div>
        </xsl:copy>
    </xsl:template>

    <xsl:template match="*[@data-element-type='inputs']">
        <xsl:comment>The following is autogenerated text for the 'inputs'</xsl:comment>
        <pre>
            <xsl:for-each select="h:li">
                <xsl:value-of select="text()"/>
                <!-- TODO: There is probably a better way to mark a newline -->
                <xsl:text>
</xsl:text>
            </xsl:for-each>
        </pre>
    </xsl:template>

    <xsl:template match="*[@data-element-type='output']">
        <xsl:comment>The following is autogenerated text for the 'output'</xsl:comment>
        <pre>
            <xsl:apply-templates select="node()"/>
        </pre>
    </xsl:template>

    <!-- Discard these because they are stored in the JSON -->
    <xsl:template match="*[@data-element-type='initial']"/>
    <xsl:template match="*[@data-element-type='solution']"/>

    <!-- Identity Transform -->
    <xsl:template name="identity" match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>
</xsl:transform>	