{"googleAnalytics": null, "version": "1", "submitlog": "Initial version", "abstract": "<div xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:c=\"http://cnx.rice.edu/cnxml\" xmlns:md=\"http://cnx.rice.edu/mdml\" xmlns:qml=\"http://cnx.rice.edu/qml/1.0\" xmlns:mod=\"http://cnx.rice.edu/#moduleIds\" xmlns:bib=\"http://bibtexml.sf.net/\" xmlns:data=\"http://dev.w3.org/html5/spec/#custom\">Describes the creation of a project using Altera's Quartus II 11.0, simulating with the Altera University Program Simulator, and programming the DE0 board from Terasic.</div>", "revised": "2012-01-20T03:34:38Z", "printStyle": null, "roles": null, "keywords": ["Altera", "FPGA", "multiplexor", "mux", "Quartus"], "id": "67f54f99-2599-4cbb-b226-4eee7ef80cde", "canonical": "b699648f-405b-429f-bf11-37bad4246e7c", "title": "A Quartus Project from Start to Finish: 2 Bit Mux Tutorial", "mediaType": "application/vnd.org.cnx.module", "canon_url": "https://staging.cnx.org/contents/b699648f-405b-429f-bf11-37bad4246e7c:67f54f99-2599-4cbb-b226-4eee7ef80cde/A-Quartus-Project-from-Start-to-Finish:-2-Bit-Mux-Tutorial", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head xmlns:c=\"http://cnx.rice.edu/cnxml\" xmlns:md=\"http://cnx.rice.edu/mdml\"><title>A Quartus Project from Start to Finish: 2 Bit Mux Tutorial</title><meta name=\"created-time\" content=\"2011/07/26 14:17:43.033 GMT-5\"/><meta name=\"revised-time\" content=\"2012/01/19 21:34:38.533 US/Central\"/><meta name=\"license\" content=\"http://creativecommons.org/licenses/by/3.0/\"/><meta name=\"keywords\" content=\"Altera, FPGA, multiplexor, mux, Quartus\"/><meta name=\"subject\" content=\"Science and Technology\"/></head>\n\n<body xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:c=\"http://cnx.rice.edu/cnxml\" xmlns:md=\"http://cnx.rice.edu/mdml\" xmlns:qml=\"http://cnx.rice.edu/qml/1.0\" xmlns:mod=\"http://cnx.rice.edu/#moduleIds\" xmlns:bib=\"http://bibtexml.sf.net/\" xmlns:data=\"http://www.w3.org/TR/html5/dom.html#custom-data-attribute\" data-cnxml-to-html-ver=\"1.3.3\"><div data-type=\"document-title\">A Quartus Project from Start to Finish: 2 Bit Mux Tutorial</div><div data-type=\"abstract\">Describes the creation of a project using Altera's Quartus II 11.0, simulating with the Altera University Program Simulator, and programming the DE0 board from Terasic.</div>\n    <section data-depth=\"1\" id=\"id3953301\"><h3 data-type=\"title\">Building Projects in Quartus</h3>\n      <p id=\"id1169331178955\"> This section is intended to provide an in-depth introduction to creating projects in Quartus, laying out a circuit diagram, simulating the circuit, and finally using the project to configure an FPGA through an example project showcasing a 2-bit MUX. Altera has made a very nice tutorial for Quartus as well which you can find <a href=\"ftp://ftp.altera.com/up/pub/Tutorials/DE2/Digital_Logic/tut_quartus_intro_schem.pdf\">here</a>. Altera&#8217;s tutorial is meant for a different board than the DE0 we will be using so make sure to account for that. Also, they have a slightly different method for connecting inputs and outputs to the FPGA. Either method works and you can use whichever one you prefer, however, the method set forth in this section will likely be more straightforward and user-friendly. Additionally, you can access another tutorial from within Quartus at any time by clicking on Tutorial in the Help menu.</p>\n      <section data-depth=\"2\" id=\"id1169330229640\"><h4 data-type=\"title\">Starting a Quartus Project</h4>\n        <p id=\"id1169330036426\"> A Quartus project acts as a support structure for a collection of design files. It serves to bring them together in a common working environment, define their relationships both within the project to each other and to the FPGA, and define common characteristics. All work in Quartus starts with a project.</p>\n        <ul id=\"id1169330224280\">\n          <li>Begin by opening Quartus II Web Edition. A screen titled &#8220;Getting Started with Quartus II Software&#8221; should open from which you can select Create a New Project. Otherwise select File-&gt;New Project Wizard. Make sure you select this and not simply New, which would instead create a new file.</li>\n          <li>In the working directory field specify the folder,&#8221;My_Quartus_Projects&#8221; for the purpose of this example, to save your project in. While you can make this folder on your U: drive, Quartus will generally run faster if working on projects in the C: drive. It is recommended to make temporary folder on the C: drive to put your projects in and transfer them to your U: drive for safe keeping. Note that Quartus will not create a folder for the project files in this location, it will merely save the files here so make sure the lowest level folder is somewhere set aside for this particular project. This will make it easier to locate files in the project and to transfer the project between different computers. Finally, enter the desired name for you project, the final field for the top level design file name will fill itself in as you name the project. It is recommended for simplicities sake that the project and the folder it&#8217;s in have the same name. Also note that Quartus will not let you use spaces in your naming, underscores or dashes are recommended instead. The name &#8220;2_bit_mux&#8221; will be used for the purposes of this example.</li>\n        </ul>\n        <figure id=\"id1169327781841\"><figcaption>Specifiying a Project Location and Name</figcaption>\n            <span data-type=\"media\" id=\"id1169327781841_media\" data-alt=\"\">\n              <img src=\"/resources/d1061a22d28a4719c035ca06c8d9b096205354ab/graphics1.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169327781841__onlineimage\" height=\"467\" width=\"600\"/>\n            </span>\n            \n          </figure>\n        <ul id=\"id1169330900997\">\n          <li>Next you will see the Add Files screen. All of the labs and projects you will be working on will either have all necessary files included or be started from scratch so we won&#8217;t be using this feature for now. It is also possible to add files whenever you open a file or save as and we will want to do this during this tutorial in order to ensure our project works as expected.</li>\n        </ul>\n        <ul id=\"id1169330506401\">\n          <li>After this you will have to specify your target FPGA. The FPGA in the DE0 board we will be using is a <strong data-effect=\"bold\">Cyclone III EP3C16F484C6</strong>. You can also find this information by looking at the specification printed on the chip itself.</li>\n        </ul>\n        <figure id=\"id1169330012413\"><figcaption>Selecting the correct FPGA </figcaption>\n            <span data-type=\"media\" id=\"id1169330012413_media\" data-alt=\"\">\n              <img src=\"/resources/1aa40dc296ca5e28e1a03a4a6dd30707f4aee789/graphics2.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169330012413__onlineimage\" height=\"465\" width=\"600\"/>\n            </span>\n            \n          </figure>\n        <ul id=\"id1169337462944\">\n          <li>The next screen allows you to specify other programs to use with this project in addition to Quartus. We won&#8217;t be using any of these so just click next. After reviewing everything on the final screen to make sure it&#8217;s set up as you want it and you&#8217;re ready to begin laying out your circuit.</li>\n        </ul>\n      </section>\n      <section data-depth=\"2\" id=\"id1169330874410\"><h4 data-type=\"title\">Building a Circuit in Quartus</h4>\n        <ul id=\"id1169330169184\">\n          <li>Although we specified a name for our top level design file, we still need to create it. Go to File-&gt;New or hit Ctrl+N and select Block Diagram/Schematic File under Design Files. Once it&#8217;s open go ahead and Save As, Quartus should automatically give it the same title as the project. Make sure that the box titled &#8220;Add file to current project&#8221; is checked before saving and that the file is being saved into the project folder.</li>\n        </ul>\n        <ul id=\"id1169330052041\">\n          <li>You should now see a grid of dots and just at the top of it a toolbar. This is where most of our work in Quartus will take place.</li>\n        </ul>\n        <figure id=\"id1169330118229\"><figcaption>The toolbar and some of the tools which will be frequently used.</figcaption>\n            <span data-type=\"media\" id=\"id1169330118229_media\" data-alt=\"\">\n              <img src=\"/resources/19db6d7acf26776bbfd0a941024fa9bd52f4cf98/graphics3.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169330118229__onlineimage\" height=\"172\" width=\"599\"/>\n            </span>\n            \n          </figure>\n        <ul id=\"id1169330461092\">\n          <li>In the upper left corner of the window is the project navigator. Since we only have one file in our project, there&#8217;s not much to see here, but if we had more we would be able to easily keep track of the hierarchy of all the files within the project. Additionally, we can easily open up files associated with this project by double clicking them within this box.</li>\n          <li>We&#8217;ll start by adding symbols to our schematic. Normally you would want to first plan out your circuit design by using Karnaugh maps to write logical functions for the operation of your circuit, however, we&#8217;ll proceed as though this step has already been completed.</li>\n          <li>Click on the place symbol tool to open up the library of available symbols. This can include the default symbols included with Quartus as well as any user created symbols. Within the Quartus library, the majority of the symbols we&#8217;ll be using will come from the &#8220;primitives&#8221; folder. Start by finding a two input AND gate. You can either navigate to the &#8220;logic&#8221; folder under primitives and find the gate labeled &#8220;and2&#8221; or simply search for this symbol using the name box below the browser. Note that the name typed here has to exactly match the symbol name for Quartus to find it. Before you click okay, make sure that the box labeled repeat-insert mode is checked as shown below.</li>\n        </ul>\n        <figure id=\"id1169330484747\"><figcaption>The Quartus symbol browser</figcaption>\n            <span data-type=\"media\" id=\"id1169330484747_media\" data-alt=\"\">\n              <img src=\"/resources/48be30bf9f60a8f3a214e6320b4179d17cc2f24d/graphics4.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169330484747__onlineimage\" height=\"351\" width=\"599\"/>\n            </span>\n            \n          </figure>\n        <ul id=\"id6929040\">\n          <li>Place two AND gates onto the grid. Although their relative position isn&#8217;t that important since we can remotely connect symbols, it always helps to have a neat circuit layout so for now place them relatively close together. Once you&#8217;re done, hit escape to exit from placement mode.</li>\n          <li>Continuing on, go back to the symbol browser and select an &#8220;or2&#8221; gate, also located in primitives-&gt;logic. Place one of these gates to the right of your two AND gates.</li>\n          <li>Next we&#8217;ll add an inverter to implement the select logic for the MUX. In the symbol browser find the &#8220;not&#8221; gate. Place this close to the input of one of the AND gates. Note that it shouldn&#8217;t be a problem at this point, but if you ever find yourself running out of room on the grid, drag a component to the edge of the screen to expand the available area.</li>\n          <li>Now we&#8217;ll add in I/O pins. This is where signals will enter and leave the schematic. They can be connected to other schematics in the project or connected to inputs and outputs on the board, though we&#8217;ll define these connections later. For now, go to the drop-down menu on the Pin Tool and choose input. Again, you can place your pins anywhere due to remote wiring, but for now, place two pins to the left of your logic gates for the inputs to the MUX and one above them for the select signal. Go back to the symbol tool, select output, and place one output pin to the right of your circuit for the output of the MUX. Right click on your I/O pins and select properties. From here give each pin a representative name, which will help out in the later I/O assignment phase.</li>\n        </ul>\n        <figure id=\"id1169338849325\"><figcaption>One possible way to layout your gates and pins on the grid</figcaption>\n            <span data-type=\"media\" id=\"id1169338849325_media\" data-alt=\"\">\n              <img src=\"/resources/39e50900a4210140751ddde0fc244fbb5de0ed6e/graphics5.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169338849325__onlineimage\" height=\"298\" width=\"600\"/>\n            </span>\n            \n          </figure>\n        <ul id=\"id3863939\">\n          <li>The final step will be to connect all our components together. As previously mentioned, we can run wires directly between components or make wireless connections. </li>\n          <li>To make a wired connection, either select the orthogonal node tool or move your mouse over one of the ports on a symbol, the pointer should change to the look like the node tool. Then click and drag from the origin port to the port you wish to reach and release. Be careful not to intersect any other ports as this will cause them to be joined to the wire, although crossing over other wires will not create a connection. You can tell if a wire is connected to something by the large dot, the typical indicator of connections in circuit diagrams. Go ahead and connect up the inputs to the two AND gates so that they will function as the beginning of a MUX.</li>\n        </ul>\n        <figure id=\"id1169330460091\"><figcaption>Possible circuit wiring for the first stage of the MUX</figcaption>\n            <span data-type=\"media\" id=\"id1169330460091_media\" data-alt=\"\">\n              <img src=\"/resources/c2dcfc19be0728956ddab9c4dca8d8eadeca812d/graphics6.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169330460091__onlineimage\" height=\"394\" width=\"468\"/>\n            </span>\n            \n          </figure>\n        <ul id=\"id1169344062273\">\n          <li>While this method is fairly straightforward, it has its&#8217; disadvantages such as possible unintended connections and vast webs of wiring on more complicated circuits. We can simplify the process with wireless connections.</li>\n          <li>Unfortunately, you cannot directly name ports. Instead we will connect a small piece of wire to the ports and name this wire. Any wires on the grid which share the same name are connected together.</li>\n          <li>Begin by placing short bits of wire at all the remaining ports in the circuit. A length of one on the grid is sufficient though a length of two may be easier to work with. Once placed, right click on the wire and select properties.</li>\n          <li>Under the General tab you can enter a name for the selected wire. As with project names, Quartus won&#8217;t allow for spaces so either remove them or use underscores. To connect any other wire with this named one, simply repeat the procedure. Using this wireless method, connect the remainder of the MUX together.</li>\n        </ul>\n        <figure id=\"id6351022\"><figcaption>Example wireless connections</figcaption>\n            <span data-type=\"media\" id=\"id6351022_media\" data-alt=\"\">\n              <img src=\"/resources/fd7c47e2e065531b15a71100ae89f08175fc88c1/graphics7.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id6351022__onlineimage\" height=\"217\" width=\"599\"/>\n            </span>\n            \n          </figure>\n        <ul id=\"id1169330068621\">\n          <li>The final step before we get to pin connections is to make sure our circuit is functional. On the left side of the screen is the Tasks menu where we can find a variety of commands to create a finished design file. Eventually we will want to compile our whole design, though for now we can simply go through the Anaylsis &amp; Synthesis step. Double click on Analysis &amp; Synthesis for Quartus to check over the circuit for any potential issues such as unconnected ports. If Quartus finds something wrong it will halt the process and display the error in the message box at the bottom of the screen.</li>\n        </ul>\n        <figure id=\"id1169330327998\"><figcaption>An unsuccessful analysis &amp; synthesis process due to an unconnected port</figcaption>\n          <span data-type=\"media\" id=\"id1169330327998_media\" data-alt=\"\">\n            <img src=\"/resources/be05de80875dc2a45731a4aec81771a033be6474/graphics8.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169330327998__onlineimage\" height=\"217\" width=\"600\"/>\n          </span>\n          \n        </figure>\n      </section>\n      <section data-depth=\"2\" id=\"id1169332205995\"><h4 data-type=\"title\">Defining I/O Connections</h4>\n        <ul id=\"id1169329744451\">\n          <li>Once we&#8217;ve successfully performed Analysis &amp; Synthesis we are ready to move on to defining pin connections. In order to do this we first need to know the pin addresses of the input and output devices on our DE0 board. These can be found in the <a href=\"http://www.terasic.com.tw/cgi-bin/page/archive_download.pl?Language=English&amp;No=364&amp;FID=0c266381d75ef92a8291c5bbdd5b07eb\">DE0 User Manual</a> on pages 24-29, pages 27-32 of the PDF. For now we will only be looking at the switch and LED pin assignments.</li>\n          <li>For each entry in the assignment table, the signal name corresponds to the identifier printed on the board next to the relavent device and the pin name tells us where we should connect to in order to access that device.</li>\n          <li>To specify these connections we will use the Pin Planner located under Assignments-&gt;Pin Planner. By performing Analysis and Synthesis earlier, we gave Quartus information on how many I/O pins we had on our circuit diagram and what their names were. Now we just need to connect these with pins on the board. By putting in the name of a physical pin under the Location column in the Pin Planner, we tie that point on our board to the specified point on our circuit. </li>\n          <li>Although we&#8217;ll be using a particular pin layout here, you can setup your pin assignments in whatever way you feel works best for you. On future labs/projects pin layouts will already be setup so the labbies and in particular the project graders will be expecting a particular board setup and you should leave assignments as they are.</li>\n          <li>For this example we&#8217;ll use the leftmost slider switch, SW[0], for our select signal. Since we can see in the user manual that SW[0] is tied to PIN_J6, we simply type this, or even just J6 and it will fill in the name, into the Location column next to the &#8220;select&#8221; listing under the Node Name column. We&#8217;ll continue in this fashion, assigning &#8220;data1&#8221; to SW[1] at PIN_H5, &#8220;data2&#8221; to SW[2] at PN_H6, and assigning &#8220;out&#8221; to the leftmost LED, LEDG[0] at PIN_J1.</li>\n        </ul>\n        <figure id=\"id1169329366219\"><figcaption>Example pin assignments in the Pin Planner</figcaption>\n          <span data-type=\"media\" id=\"id1169329366219_media\" data-alt=\"\">\n            <img src=\"/resources/fe7d7a5f057d6a11b8bd7ff197a0e719c9a9a99e/graphics9.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169329366219__onlineimage\" height=\"469\" width=\"599\"/>\n          </span>\n          \n        </figure>\n        <ul id=\"id1169330160430\">\n          <li>Now that we have finished assigning pins, we can go back and run the complete compilation process. Double click on Compile Design in the Tasks menu of the Project Navigator to run all of it&#8217;s sub tasks. Enevitably, you will get warnings about some features not being available without a subscription and there not being a clock, since we didn&#8217;t need one. Also, you will get critical warnings telling you that a specific design file is needed for the Timing Analyzer. These extra features are not required and these warnings can be ignored.</li>\n        </ul>\n      </section>\n      <section data-depth=\"2\" id=\"id1169330116371\"><h4 data-type=\"title\">Waveform Simulation</h4>\n        <ul id=\"id1169338992984\">\n          <li>Before actually programming the FPGA on the board, it is a good idea to simulate a variety of inputs to our circuit and check its&#8217; responses. Although the ability to simulate inputs to circuits was removed from Quartus II beginning with version 10.0 , these features can still be used with the <a href=\"http://www.altera.com/education/univ/software/qsim/unv-qsim.html\">Altera University Program Simulator</a>.</li>\n          <li>Opening the Altera U.P. Simulator should open two windows, the U.P simulator and Qsim. Go to Qsim, select File-&gt;Open Project, and select your .qpf project file for the 2 bit mux. Next go to File-&gt;New Simulation Input File to open up the Simulation Waveform Editor.</li>\n          <li>Right click in the white space under the Name heading and select Insert Node or Bus. From this window click the Node Finder button. Finally, click the List button to have the Waveform Editor import the I/O ports from the project file. Move all of these nodes over to the Selected Nodes box and return to the Waveform Editor Window which should now list these I/O ports along the left side. By clicking and dragging the name of a signal you can rearrange the order they are displayed in, useful for separating the input and output signals. Go ahead and save the waveform file in the project folder for the 2 bit mux.</li>\n        </ul>\n        <figure id=\"id1169339899606\"><figcaption>Simulation Waveform Editor Window</figcaption>\n          <span data-type=\"media\" id=\"id1169339899606_media\" data-alt=\"\">\n            <img src=\"/resources/c1cd32f6cecbcc81764d70493003ad565a139e57/graphics10.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169339899606__onlineimage\" height=\"266\" width=\"600\"/>\n          </span>\n          \n        </figure>\n        <ul id=\"id1169330704958\">\n          <li>To begin with, all inputs are set to a constant value of 0 and the output is undefined since we have not yet run the simulation. Note the timing intervals displayed along the top. These are not as important now, but will be very useful once we start building project with clocks.</li>\n          <li>To change the value of an input, click and drag along its&#8217; waveform to select one or more intervals. Once selected, you can change the highlighted interval with buttons in the toolbar to set intervals low, high, undefined, opposite of their current value and several other options. For the purposes of testing all possible input combinations, we can either manually set the intervals or use the &#8220;Overwrite Clock&#8221; button to set up several alternating signals of differing periods.</li>\n          <li>For starters select the entire data1 signal by clicking its&#8217; name and then click the Overwrite Clock button. The Waveform Editor should have defaulted to a total time of 1000ns so set the period of this signal to be 250ns. Select the data2 signal and give it a signal with a period of 500ns and then a signal with period of 1000ns for select. Over the 1000ns of the simulation, this will test all the possible input combinations. Once finished save this waveform file and return to Qsim.</li>\n        </ul>\n        <figure id=\"id1169330140919\"><figcaption>Waveforms to test all input combinations</figcaption>\n          <span data-type=\"media\" id=\"id1169330140919_media\" data-alt=\"\">\n            <img src=\"/resources/0424b6e947b02aa57b312b08d86ca1af9f821002/graphics11.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169330140919__onlineimage\" height=\"230\" width=\"599\"/>\n          </span>\n          \n        </figure>\n        <ul id=\"id3779084\">\n          <li>Go to Assign-&gt;Simulation Settings. The Waveform Simulator supports two modes: Functional, where only the logic of the system is tested and timing is not considered, and Timing, where delays and other timing constraints are taken into account. In order to perfom Functional simulation you must first go to Processing-&gt;Generate Simulation Netlist, but for now we&#8217;ll just do a Timing simulation. In the Simulation Settings box make sure Timing is selected and then browse for the waveform file you created.</li>\n          <li>Finally go to Processing-&gt;Start Simulation or click the blue arrow over the waveform. The simulator will run and once finished it will open up waveform window containing your specified input waveforms and the resulting output. Once you are satisfied with the results or have made the necessary changes, we can move to the final step, programming the board.</li>\n        </ul>\n        <figure id=\"id1169330143778\"><figcaption>Simulation Output</figcaption>\n            <span data-type=\"media\" id=\"id1169330143778_media\" data-alt=\"\">\n              <img src=\"/resources/7e587ab3d9de304efecb218de75ebe761c130c23/graphics12.jpg\" data-media-type=\"image/jpg\" alt=\"\" id=\"id1169330143778__onlineimage\" height=\"217\" width=\"599\"/>\n            </span>\n            \n          </figure>\n      </section>\n      <section data-depth=\"2\" id=\"id1169330217627\"><h4 data-type=\"title\">Programming the Board</h4>\n        <ul id=\"id1169342762107\">\n          <li>Now that we are certain our project will function as intended, we can program our FPGA. Make sure that the DE0 board is plugged into the computer and powered on. The DE0 offers two modes of programming: one which retains the program in volatile memory only as long as the board is powered on and another which stores the program in non-volatile memory to be retrieved when the board is powered on. For our purposes the volatile memory storage will be sufficient. To set the board for this programming method, make sure the switch next to the 7 segment display is set to RUN.</li>\n          <li>In the Tasks menu below the Analysis &amp; Synthesis and Compile Design commands we used earlier, click on Program Device. Next to Hardware Setup should be listed USB-Blaster [USB-0]. If not, click on Hardware Setup and select USB Blaster from the drop down menu. Make sure that Mode is set to JTAG and that the Program/Configure box next to the .sof file is checked.</li>\n          <li>Once ready click Start and wait for the board to be programmed. You can see the state of the programming process in the message bar where it will inform you once it&#8217;s finished. If you followed the same structure as the tutorial, SW0 should serve as the select switch with SW1 and SW2 toggling the two data inputs high or low. With select in a low state, the mux will take the value from SW1 and in its&#8217; high state the value from SW2, either of which will be output on LEDG0.</li>\n          <li>This concludes the tutorial on Quartus projects. It should now be a simple matter to create a 4-bit mux and move on to the rest of the projects.</li>\n        </ul>\n      </section>\n    </section>\n  </body>\n\n</html>", "subjects": ["Science and Technology"], "legacy_id": "m42302", "parentId": null, "resources": [{"media_type": "image/jpeg", "id": "0424b6e947b02aa57b312b08d86ca1af9f821002", "filename": "graphics11.jpg"}, {"media_type": "image/jpeg", "id": "19db6d7acf26776bbfd0a941024fa9bd52f4cf98", "filename": "graphics3.jpg"}, {"media_type": "image/jpeg", "id": "1aa40dc296ca5e28e1a03a4a6dd30707f4aee789", "filename": "graphics2.jpg"}, {"media_type": "image/jpeg", "id": "39e50900a4210140751ddde0fc244fbb5de0ed6e", "filename": "graphics5.jpg"}, {"media_type": "text/xml", "id": "3dac99a454f7f6c9479d92580fd3b9dd223bb766", "filename": "index.cnxml"}, {"media_type": "image/jpeg", "id": "48be30bf9f60a8f3a214e6320b4179d17cc2f24d", "filename": "graphics4.jpg"}, {"media_type": "image/jpeg", "id": "7e587ab3d9de304efecb218de75ebe761c130c23", "filename": "graphics12.jpg"}, {"media_type": "image/jpeg", "id": "be05de80875dc2a45731a4aec81771a033be6474", "filename": "graphics8.jpg"}, {"media_type": "image/jpeg", "id": "c1cd32f6cecbcc81764d70493003ad565a139e57", "filename": "graphics10.jpg"}, {"media_type": "image/jpeg", "id": "c2dcfc19be0728956ddab9c4dca8d8eadeca812d", "filename": "graphics6.jpg"}, {"media_type": "image/jpeg", "id": "d1061a22d28a4719c035ca06c8d9b096205354ab", "filename": "graphics1.jpg"}, {"media_type": null, "id": "f40b1a6091422721a3a7149ef60b8cbe2ebecf2d", "filename": "index.cnxml.html"}, {"media_type": "image/jpeg", "id": "fd7c47e2e065531b15a71100ae89f08175fc88c1", "filename": "graphics7.jpg"}, {"media_type": "image/jpeg", "id": "fe7d7a5f057d6a11b8bd7ff197a0e719c9a9a99e", "filename": "graphics9.jpg"}], "publishers": [{"surname": "Stevenson", "suffix": "", "firstname": "Chris", "title": "", "fullname": "Chris Stevenson", "id": "jedifan42"}, {"surname": "Cavallaro", "suffix": "", "firstname": "Joseph", "title": "Prof.", "fullname": "Joseph Cavallaro", "id": "cavallar"}, {"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}], "parent": {"authors": [], "shortId": null, "version": "", "id": null, "title": null}, "stateid": 1, "parentTitle": null, "shortId": "Z_VPmSWZ", "authors": [{"surname": "Stevenson", "suffix": "", "firstname": "Chris", "title": "", "fullname": "Chris Stevenson", "id": "jedifan42"}, {"surname": "Cavallaro", "suffix": "", "firstname": "Joseph", "title": "Prof.", "fullname": "Joseph Cavallaro", "id": "cavallar"}, {"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}], "parentVersion": "", "legacy_version": "1.1", "licensors": [{"surname": "Stevenson", "suffix": "", "firstname": "Chris", "title": "", "fullname": "Chris Stevenson", "id": "jedifan42"}, {"surname": "Cavallaro", "suffix": "", "firstname": "Joseph", "title": "Prof.", "fullname": "Joseph Cavallaro", "id": "cavallar"}, {"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}], "language": "en", "license": {"url": "http://creativecommons.org/licenses/by/3.0/", "code": "by", "version": "3.0", "name": "Creative Commons Attribution License"}, "created": "2011-07-26T19:17:43Z", "doctype": "", "buyLink": null, "submitter": {"surname": "Stevenson", "suffix": "", "firstname": "Chris", "title": "", "fullname": "Chris Stevenson", "id": "jedifan42"}, "baked": null, "parentAuthors": [], "history": [{"changes": "Initial version", "version": "1", "revised": "2012-01-20T03:34:38Z", "publisher": {"surname": "Stevenson", "suffix": "", "firstname": "Chris", "title": "", "fullname": "Chris Stevenson", "id": "jedifan42"}}]}