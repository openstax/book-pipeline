{"googleAnalytics": null, "version": "1", "submitlog": "This is the first revision of this module, and breaks it apart from the original large module in better alignment with Connexions best practices.", "abstract": "<div xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:c=\"http://cnx.rice.edu/cnxml\" xmlns:md=\"http://cnx.rice.edu/mdml\" xmlns:qml=\"http://cnx.rice.edu/qml/1.0\" xmlns:mod=\"http://cnx.rice.edu/#moduleIds\" xmlns:bib=\"http://bibtexml.sf.net/\" xmlns:data=\"http://dev.w3.org/html5/spec/#custom\">This Lab Module has the project outline for a simple assembly display program.  The program is interrupt driven and combines GPIO, polling, and interrupt concepts.</div>", "revised": "2011-08-16T19:01:14Z", "printStyle": null, "roles": null, "keywords": ["Cavallaro", "Cycle", "Display", "Elec 220", "GPIO", "Interrupt", "MSP430", "Project"], "id": "29ea6719-4936-419b-9195-6da12e47b417", "title": "Putting It All Together: An Interrupt Driven MSP430 Project", "mediaType": "application/vnd.org.cnx.module", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head xmlns:c=\"http://cnx.rice.edu/cnxml\" xmlns:md=\"http://cnx.rice.edu/mdml\"><title>Putting It All Together: An Interrupt Driven MSP430 Project</title><meta name=\"created-time\" content=\"2011/05/24 16:09:14.679 GMT-5\"/><meta name=\"revised-time\" content=\"2011/08/16 14:01:14.609 GMT-5\"/><meta name=\"author\" content=\"mwjhnsn\"/><meta name=\"acl-list\" content=\"mwjhnsn\"/><meta name=\"licensor\" content=\"mwjhnsn\"/><meta name=\"license\" content=\"http://creativecommons.org/licenses/by/3.0/\"/><meta name=\"keywords\" content=\"Cavallaro, Cycle, Display, Elec 220, GPIO, Interrupt, MSP430, Project\"/><meta name=\"subject\" content=\"Science and Technology\"/></head>\n\n<body xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:c=\"http://cnx.rice.edu/cnxml\" xmlns:md=\"http://cnx.rice.edu/mdml\" xmlns:qml=\"http://cnx.rice.edu/qml/1.0\" xmlns:mod=\"http://cnx.rice.edu/#moduleIds\" xmlns:bib=\"http://bibtexml.sf.net/\" xmlns:data=\"http://www.w3.org/TR/html5/dom.html#custom-data-attribute\" data-cnxml-to-html-ver=\"1.3.2\"><div data-type=\"document-title\">Putting It All Together: An Interrupt Driven MSP430 Project</div><div data-type=\"abstract\">This Lab Module has the project outline for a simple assembly display program.  The program is interrupt driven and combines GPIO, polling, and interrupt concepts.</div>\n  \n<section data-depth=\"1\" id=\"eip-345\"><h3 data-type=\"title\">A More Complicated Assembly Program</h3><p id=\"eip-606\">By now you already have all of the tools you need to complete this assignment.  Remember what you have learned about <a href=\"/contents/06ca2321-54e8-4f28-8516-f38c8e39cac7\" target=\"_window\"> MSP430 assembly language</a>, <a href=\"/contents/e537c09a-406c-47a7-bfc8-fc34ff9c878b\" target=\"_window\">setting up GPIO</a>, and <a href=\"/contents/5f50d5b5-ccef-4fd0-959b-2fa90bf01a53\" target=\"_window\">using interrupts</a>. \n</p><ol id=\"eip-id1166551859943\" type=\"1\"><li>\nCoding in MSP430 assembly, <strong>implement an interrupt driven number sequence recorder</strong>.  You will use the same input configuration from last week (get data from pins 1-3 on an interrupt from pin 4), but now will output a readable loop of the last 5 received numbers in order.  <a href=\"#eip-872\">Assignment Details</a>\n</li>\n</ol></section><section data-depth=\"1\" id=\"eip-872\"><h3 data-type=\"title\">Part II Assignment Detail</h3><p id=\"eip-32\">Your task is to write an assembly program to display a programmable sequence of 5 numbers on the MSP430 LaunchPad.  \n</p><ul id=\"eip-id1167920060578\" data-bullet-style=\"none\"><li>You should use five slots to store the input numbers.</li>\n<li>Since our simple LaunchPad setup only has one display, you will have to rotate through each of the five numbers after a \"short\" (in human terms) delay.</li>\n<li>Use an ISR to store a new number in the \"next\" slot. (Next not necessarily meaning what is currently being displayed).  The input should go from slot 1 to 2 to 3... etc. regardless of which slot is currently being output.</li>\n<li>The program should only display a slot after a number has been input into it.  You will need to keep track of which slots have been filled.</li>\n</ul><figure id=\"eip-id1164840801766\"><figcaption>Only grey boxes are output to the display.  Also, notice how after filling all five slots, the ISR loops back and starts filling from the beginning.</figcaption><span data-type=\"media\" id=\"eip-id1164843348091\" data-alt=\"Slot fill chart-- shows how the slots should be filled sequentially.\">\n<img src=\"/resources/9ca303acc22aa85314307be56c51baca81e4b178/Lab4 Fill Order.png\" data-media-type=\"image/png\" alt=\"Slot fill chart-- shows how the slots should be filled sequentially.\"/>\n</span>\n</figure><p>\n\nYour program should consist of:\n</p><ul id=\"eip-id1170473653505\"><li>A setup routine that readies all the components of your program.</li>\n<li>A main loop that displays the stored numbers one after the other with a readable delay in between.</li>\n<li>An ISR that stores each new input number to the appropriate slot.</li>\n\n</ul><div data-type=\"list\" id=\"eip-847\"><div data-type=\"title\">A Few Hints:</div><ul data-bullet-style=\"none\"><li>The MSP430 operates at ~13MHz, which may seem slow in terms of computers, but is much too fast for the human eye to process (~30Hz).  You will have to implement a very significant delay in between number changes.</li>\n<li>One way to generate a naive delay is a long loop which does nothing.  You may even need to use a nested loop depending on how long of a delay you need.\n<p id=\"eip-id1164839715520\">Nested Loop Example in C:</p>\n<code id=\"eip-id1165354492760\" data-display=\"block\">\nint i=0;\nint j=0;\nfor (i=0; i&lt;bigNumber; i=i+1)\n{\n   for(j=bigNumber; j&gt;0; j=j-1)\n   {\n       &lt;!--This code will run ixj times--&gt;;\n    }\n}\n</code>\n\n</li>\n<li>You may find it convenient to put your five slots in RAM instead of using registers. You can then store a memory address in the register, and then increment it or set it as needed.  You will need to use indirect addressing mode though.\n<code id=\"eip-id1167123602847\" data-display=\"block\">\nmov R4, 0(R15); moves the contents of R4 to the address in R15\n\n</code>\n\n<code id=\"eip-id1167099051671\" data-display=\"block\">\nmov 0(R15), R4; moves the contents of the address in R15 into R4\nmov &amp;0x0200, R4; moves the contents of memory address 0x0200 into R4\n</code>\n</li>\n<li>Consider where it may be useful to implement parts of your program in subroutines</li></ul></div></section><section data-depth=\"1\" id=\"eip-397\"><h3 data-type=\"title\">Wrapup</h3><p id=\"eip-802\">Congratulations on completing lab 4!  Your program sophistication has dramatically increased.  You understand the basics of <strong>interrupt driven programming</strong>, and know how to use assembly level <strong>subroutines</strong>.  You have had to keep track of <strong>data</strong> as well as design a responsive I/O interface to the outside world. Keep up the good work!</p></section><p id=\"eip-198\">Labs based on the original Elec 220 labs maintained by Michael Wu.</p><p id=\"eip-427\">Images from original lab documents by Yang Sun. Modified by Matt Johnson.</p>\n</body>\n\n</html>", "subjects": ["Science and Technology"], "legacy_id": "m40645", "parentId": null, "resources": [{"media_type": "text/xml", "id": "6825042e0a5ddb7fa93b2e5f65eaffd8e66f7334", "filename": "index.cnxml.html"}, {"media_type": "image/png", "id": "9ca303acc22aa85314307be56c51baca81e4b178", "filename": "Lab4 Fill Order.png"}, {"media_type": "text/xml", "id": "b0fa79e7b8b0603819434ac71545d52571350ea3", "filename": "index.cnxml"}], "publishers": [{"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}], "parent": {"authors": [], "shortId": null, "version": "", "id": null, "title": null}, "stateid": 1, "parentTitle": null, "shortId": "KepnGUk2", "authors": [{"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}], "parentVersion": "", "legacy_version": "1.1", "licensors": [{"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}], "language": "en", "license": {"url": "http://creativecommons.org/licenses/by/3.0/", "code": "by", "version": "3.0", "name": "Creative Commons Attribution License"}, "created": "2011-05-24T21:09:14Z", "doctype": "", "buyLink": null, "submitter": {"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}, "baked": null, "parentAuthors": [], "history": [{"changes": "This is the first revision of this module, and breaks it apart from the original large module in better alignment with Connexions best practices.", "version": "1", "revised": "2011-08-16T19:01:14Z", "publisher": {"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}}]}