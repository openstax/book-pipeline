{"googleAnalytics": null, "version": "2", "submitlog": "This update brings the module in line with the Connexions best practices and improves the clarity of the assignment.", "abstract": "<div xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:c=\"http://cnx.rice.edu/cnxml\" xmlns:md=\"http://cnx.rice.edu/mdml\" xmlns:qml=\"http://cnx.rice.edu/qml/1.0\" xmlns:mod=\"http://cnx.rice.edu/#moduleIds\" xmlns:bib=\"http://bibtexml.sf.net/\" xmlns:data=\"http://dev.w3.org/html5/spec/#custom\">This module contains the Elec 220 lab 4, which covers basic interrupt usage on the TI MSP430 microcontroller at the assembly language level.</div>", "revised": "2011-08-16T18:55:25Z", "printStyle": null, "roles": null, "keywords": ["Assembly language", "ECE", "Elec 220", "Interrupt", "Lab", "MSP430", "Rice", "Subroutine", "Vector Table"], "id": "5f50d5b5-ccef-4fd0-959b-2fa90bf01a53", "title": "Interrupt Driven Programming in MSP430 Assembly", "mediaType": "application/vnd.org.cnx.module", "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head xmlns:c=\"http://cnx.rice.edu/cnxml\" xmlns:md=\"http://cnx.rice.edu/mdml\"><title>Interrupt Driven Programming in MSP430 Assembly</title><meta name=\"created-time\" content=\"2010/12/15 10:58:00 US/Central\"/><meta name=\"revised-time\" content=\"2011/08/16 13:55:25.412 GMT-5\"/><meta name=\"author\" content=\"mwjhnsn\"/><meta name=\"acl-list\" content=\"mwjhnsn\"/><meta name=\"licensor\" content=\"mwjhnsn\"/><meta name=\"license\" content=\"http://creativecommons.org/licenses/by/3.0/\"/><meta name=\"keywords\" content=\"Assembly language, ECE, Elec 220, Interrupt, Lab, MSP430, Rice, Subroutine, Vector Table\"/><meta name=\"subject\" content=\"Science and Technology\"/></head>\n\n<body xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:c=\"http://cnx.rice.edu/cnxml\" xmlns:md=\"http://cnx.rice.edu/mdml\" xmlns:qml=\"http://cnx.rice.edu/qml/1.0\" xmlns:mod=\"http://cnx.rice.edu/#moduleIds\" xmlns:bib=\"http://bibtexml.sf.net/\" xmlns:data=\"http://www.w3.org/TR/html5/dom.html#custom-data-attribute\" data-cnxml-to-html-ver=\"1.3.2\"><div data-type=\"document-title\">Interrupt Driven Programming in MSP430 Assembly</div><div data-type=\"abstract\">This module contains the Elec 220 lab 4, which covers basic interrupt usage on the TI MSP430 microcontroller at the assembly language level.</div>\n  <section data-depth=\"1\" id=\"eip-338\"><h3 data-type=\"title\">MSP430 Interrupts and Subroutines: Your Tasks</h3><p id=\"eip-467\">This week you will learn more about the philosophy of interrupt driven programming and specifically how interrupts work on the MSP430.  To test out your knowledge, you'll write another simple I/O echo program that builds off the code from the last lab.\n</p>\n\n<ol id=\"tasks_list\" data-element-type=\"Enumerated\" type=\"1\"><li>  Coding in MSP430 Assembly, <strong>create an interrupt driven I/O echo program</strong>. The program should read the values of the input pins when pin 4 (P1.3) triggers an interrupt, and then output the read value to the 7 segment display. <a href=\"#eip-101\">Details</a>\n</li>\n\n</ol>\n</section><section data-depth=\"1\" id=\"eip-776\"><h3 data-type=\"title\">Background Information</h3><section data-depth=\"2\" id=\"eip-267\"><h4 data-type=\"title\">A Few More Instructions</h4><p id=\"eip-43\">Like you saw in the <a href=\"/40643\">GPIO Lab</a>, the MSP430 (even though it's a RISC <strong>R</strong>educed <strong>I</strong>nstruction <strong>S</strong>et <strong>C</strong>omputing processor) has a fair number of instructions in addition to those you learned for the LC-3.  The extra instructions help programmers simplify code readability and streamline program execution.\n</p>\n\n<p id=\"eip-id1170988177462\">You've already seen how the MSP430 uses memory access modifiers and the general purpose <code data-display=\"inline\">mov</code> instruction to implement all the functionality of the LC-3's plethora of load and store instructions.  Two other very useful MSP430 instructions are <code data-display=\"inline\">bis</code> (<strong>Bi</strong>t <strong>S</strong>et) and <code data-display=\"inline\">bic</code> (<strong>Bi</strong>t <strong>C</strong>lear).  These instructions take an operand with \"1\"s in the bits you wish to set or clear, and then a destination upon which to do the operation.  This comes in handy when you need to modify a few specific configuration bits out of a whole register (like the GIE bit in the SR for interrupts... see below!).  The header file has pre-defined masks you can use with <code data-display=\"inline\">bic</code> and <code data-display=\"inline\">bis</code> to make bit operations much more readable.\n</p>\n\n<div data-type=\"note\" id=\"eip-id1170988196857\">\n<p id=\"eip-id1170988827159\">The <code data-display=\"inline\">bis</code> and <code data-display=\"inline\">bic</code> instructions actually emulate functionality you already had with <code data-display=\"inline\">and</code>, <code data-display=\"inline\">inv</code>, and <code data-display=\"inline\">or</code>.\n</p>\n<p id=\"eip-930\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p><p id=\"eip-id1171001563395\"><code data-display=\"inline\">bis op1, op2</code> corresponds to \n<code id=\"eip-id1170990662240\" data-display=\"block\">or op1, op2</code>\n</p>\n<p id=\"eip-518\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p><p id=\"eip-id1171000934045\">\n<code data-display=\"inline\">bic op1, op2</code> corresponds to \n<code id=\"eip-id1171001853253\" data-display=\"block\">\ninv op1\nand op1, op2\n</code>\n</p>\n</div><section data-depth=\"3\" id=\"eip-315\"><h5 data-type=\"title\">Directives</h5><p id=\"eip-847\">\nAssembler and Compiler Directives sound intimidating, but they are nothing more than bits of code intended for the assembler/compiler itself.  Directives allow you to specify how the assembler/compiler handles your code and how it all finally comes together into the executable binary file.  \n</p>\n\n<p id=\"eip-id1165593377571\">\nThe skeleton file has included several directives all along-- <code data-display=\"inline\">.cdecls C,LIST, \"msp430g2231.h\"</code> tells your .asm file to include the c code header aliases from the generic MSP430G2231 configuration file.  <code data-display=\"inline\">.text</code> tells the assembler to place your program in the main flash memory section, and <code data-display=\"inline\">.sect \"reset\"</code> defines where to start the program after a processor restart.\n</p><p id=\"eip-697\">In this lab, you'll have to use directives to <a href=\"#eip-id3675214\">place your ISR vectors into the vector table.</a></p></section>\n</section><section data-depth=\"2\" id=\"eip-541\"><h4 data-type=\"title\">Basic Interrupts</h4>\n\n<ul id=\"eip-292\" data-bullet-style=\"none\"><li>\n\n<div data-type=\"list\" id=\"eip-252\"><div data-type=\"title\">Problems with polling</div><ul data-bullet-style=\"none\"><li>Continuously polling a pin for input wastes useful CPU cycles and consequently uses more power</li>\n<li>\nThe CPU must check the pin often enough to detect a change-- when trying to catch a rapidly changing digital signal (a small pulse or transient, etc.), polling may not be sufficient.\n</li>\n<li><strong>\nIn conclusion, polling is easy to understand and implement, but is generally inefficient.</strong>\n</li>\n</ul></div>\n\n</li>\n\n<li>\n\n<div data-type=\"list\" id=\"eip-571\"><div data-type=\"title\">The solution... interrupts</div><ul data-bullet-style=\"none\"><li>\nInterrupts use dedicated hardware to detect input changes or hardware events (button pushes, timer intervals, etc...)\n</li>\n<li>\nWhen a change is detected, the interrupt logic interrupts the CPU execution.\n<ul id=\"eip-id1171679021552\">\n<li>\nThe CPU stops what it is doing and calls a special section of code determined beforehand in the interrupt vector table.  This section of code is known as the <strong>I</strong>nterrupt <strong>S</strong>ervice <strong>R</strong>outine, or ISR for short.\n</li>\n<li>\nOnce the interrupt has been serviced and the ISR is complete, the CPU returns to what it was doing before.\n</li>\n</ul>\n</li>\n\n<li>\nThe way the main program pauses execution and then branches to a new section of code works in a similar way to the LC3's Traps.\n</li></ul></div>\n</li>\n\n\n\n<li><div data-type=\"list\" id=\"eip-53\"><div data-type=\"title\">Advantages to Interrupts</div><ul data-bullet-style=\"none\"><li>Interrupts will catch quickly changing inputs (within reason) that polling might have missed.</li>\n<li>The CPU is allowed a level of freedom to multitask without needing to \"worry\" about explicitly catching input changes.  The CPU can do other tasks safely while waiting for an interrupt to fire.</li>\n<li><div data-type=\"note\" id=\"eip-id1167657997860\" data-label=\"note\" data-element-type=\"note\">Programs can be \"interrupt driven,\" meaning that the program is just a collection of different interrupt service routines for different tasks.\n<ul id=\"eip-id1171690247630\"><li>\nThe CPU is only active while servicing an ISR, allowing it to go into low power mode between interrupts.  Programs that spend a large percentage of their run time waiting on outside events can be made <strong>much more power efficient</strong>.\n</li>\n</ul></div></li>\n</ul></div>\n</li>\n\n<li><div data-type=\"list\" id=\"eip-8\"><div data-type=\"title\">Basic Interrupt Implementation</div><ul data-bullet-style=\"none\"><li>Discrete hardware detects interrupt conditions and then triggers the appropriate interrupt in the CPU if it is high enough priority.</li>\n\n<li>The interrupt vector table maps each interrupt to the memory address of its interrupt service routine.  Like with traps, the CPU first goes to this table to find the address of the ISR and then jumps to the actual ISR code.</li>\n\n<li>CPUs contain several different interrupts to handle different external events uniquely.</li>\n</ul></div>\n<figure id=\"msp430InterruptFlow\"><div data-type=\"title\">MSP430 Interrupt Call Procedure</div><span data-type=\"media\" id=\"eip-id1168128488365\" data-alt=\"Interrupt calling chart-- showing how the MSP430 saves its state before executing the ISR\">\n<img src=\"/resources/dae8a4633a19d0e6c0d6eb6fdde6e1cca2354559/MSP430 Interrupt Execution.png\" data-media-type=\"image/png\" alt=\"Interrupt calling chart-- showing how the MSP430 saves its state before executing the ISR\"/>\n</span>\n</figure>\n</li>\n\n<li><div data-type=\"list\" id=\"eip-109\"><div data-type=\"title\">Interrupts on the MSP430</div><ul data-bullet-style=\"none\"><li>\nOn the MSP430, there are two types of interrupts: maskable and non-maskable.  <dl id=\"eip-id1169803925616\"><dt>\nMaskable Interrupt\n</dt>\n<dd id=\"eip-id1169799039656\">\nMost interrupts are maskable.  Maskable interrupts can be enabled or disabled as a group by setting the GIE (<strong>G</strong>eneral <strong>I</strong>neterrupt <strong>E</strong>nable) bit in the status register.  The interrupts must also be enabled individually, but masking allows delicate code (For example, if you are running a precisely timed output routine that must execute all at once) to run in a near interrupt free state by disabling only one bit.  <div data-type=\"code\" id=\"eip-id1169796318664\"><div data-type=\"title\">Enabling All Maskable Interrupts</div><pre data-display=\"block\">bis.w    #GIE, SR</pre></div>\n</dd></dl>\n<dl id=\"eip-id1163915435880\"><dt>\nNon-Maskable Interrupt\n</dt>\n<dd id=\"eip-id1163911694123\">\nNon-Maskable interrupts will trigger an interrupt at any point in code execution-- they cannot be enabled or disabled on a line by line basis, and they will execute even if the processor is \"stuck\".  Non-maskable interrupts mainly deal with recovering from errors and resets (illegal memory accesses, memory faults, watchdog expiration, or a hardware reset will trigger non-maskable interrupts).\n</dd>\n</dl>\n</li>\n\n\n<li>\n<strong>In the MSP430, GPIO interrupt capability must be enabled at the masking level as well as the individual pin enable level.</strong>\n</li>\n\n<li>\nInterrupts should be enabled during the program initialization (before the main code loop or entering low power mode), but after any initialization steps vital to the ISR \n</li>\n\n<li>\n<div data-type=\"list\" id=\"eip-id1167674470555\"><div data-type=\"title\">There are four main steps to enabling interrupts on the MSP430's GPIO pins.</div><ul data-element-type=\"bulleted\"><li>\nEnable interrupts on the individual input pin (in this example pin P1.4) using the port's interrupt enable register.\n<code id=\"eip-id1167108769684\" data-display=\"block\">bis.b #010h, &amp;P1IE\n</code>\nP1IE= <strong>P</strong>ort <strong>One</strong> <strong>I</strong>nterrupt <strong>E</strong>nable\n</li>\n<li>\nSelect whether the interrupt triggers on a transition from low-&gt;high (\"0\") or high-&gt;low (\"1\") using the port's edge select register\n<code id=\"eip-id1167102429526\" data-display=\"block\">bis.b #010h, &amp;P1IES\n</code>\nP1IES=<strong>P</strong>ort <strong>One</strong> <strong>I</strong>nterrupt <strong>E</strong>dge <strong>S</strong>elect\n</li>\n<li>\nClear the interrupt flag on the pin in the port's interrupt flag register.\n<code id=\"eip-id1167107393266\" data-display=\"block\">bic.b #010h, &amp;P1IFG\n</code>\nP1IFG=<strong>P</strong>ort <strong>One</strong> <strong>I</strong>nterrupt <strong>F</strong>la<strong>G</strong>\n\n<div data-type=\"note\" id=\"eip-id1167650383787\">Flags are important.  For one, if you forget to clear the flag at the end of your ISR, you will just trigger another interrupt as soon as you return.  Also, all of the GPIO pins trigger the same port one ISR.  If you have multiple interrupt triggering pins, flags can allow you to determine which pins triggered the interrupt.\n</div>\n</li>\n<li>\nAnd lastly, only after all of your other important setup, enable all the maskable interrupts in the overall CPU status register.\n<code id=\"eip-id1167111825679\" data-display=\"block\">bis.w #GIE, SR\n</code>\n</li>\n</ul></div><div data-type=\"list\" id=\"eip-27\"><div data-type=\"title\">Writing an MSP430 Interrupt Service Routine</div><ul data-bullet-style=\"none\"><li>The ISR needs to be a section of code outside of the normal main loop.</li>\n<li>Your ISR must begin with a label and end with a \n<code data-display=\"inline\">reti</code> instruction.\n<code id=\"eip-id1165384597404\" data-display=\"block\">\nPin1_ISR  \n          &lt;YOUR ISR CODE&gt;\n          bic.b #001h, &amp;P1IFG\n          reti\n</code>\n</li>\n\n<li>At the end of your .asm program, you need to tell the assembler to write the starting address of your ISR to the correct section of the interrupt vector table.  The label at the beginning of your ISR allows you to find this address.</li>\n<li><div data-type=\"note\" id=\"eip-id1170106234647\" data-label=\"aside\" data-element-type=\"aside\">CCS4 uses a separate file to define different sections of your controller's memory.  This extra layer of abstraction makes it easier to port code between different microcontrollers, but means that you the programmer can't write directly to a specific memory address in your program.  To fill your vector table, you'll need to use the following syntax:\n\n<code id=\"eip-id1163859760104\" data-display=\"block\">.sect MEMORYSECTION\n.word DATATOPLACE/LABEL\n</code>\n\n</div></li> \n<li>\nThe port one interrupt vector for the MSP430 G2231 is defined as 0xFFE4.  If you look in the file \"Lnk_msp430g2231.cmd\" (in the file browser for your lab 4 project), you will see that address 0xFFE4 has been assigned to INT02.  In the second half of the linker file, the section .int02 has been assigned to memory addresses &gt; INT02.  <strong>When you want to write to the GPIO entry of the interrupt vector table, you need write to code section \".int02\" in your assembly file.</strong>\n\n<div data-type=\"code\" id=\"eip-id3675214\"><div data-type=\"title\">Setting the GPIO vector in the interrupt vector table</div><pre data-display=\"block\">\n.sect \".int02\"\n.word Pin1_ISR\n</pre></div>\n</li>\n<li>\nThe <code data-display=\"inline\">.sect</code> instruction directs the linker to put the code that follows into a specific code section.  (You have been using this all along, just putting your code into the main program \".text\" section.)\n</li>\n<li>\nThe <code data-display=\"inline\">.word</code> instruction directs the linker to write a word length data value into memory.\n</li> </ul></div>\n</li>\n\n\n\n</ul></div></li></ul><p id=\"eip-630\">For more information on interrupts, see the <a href=\"/contents/f3ac6283-41f7-4814-b312-32d524f3803f\" target=\"_window\">Interrupt section of TI's Microcontroller and Embedded Systems Laboratory.</a></p>\n</section><section data-depth=\"2\" id=\"eip-240\"><h4 data-type=\"title\">Subroutines</h4><div data-type=\"list\" id=\"eip-id1168378776699\"><div data-type=\"title\">Subroutine Basics</div><ul data-bullet-style=\"none\"><li>Subroutines have a lot in common with interrupt service routines (in fact, many programmers use ISR interchangably between <strong>I</strong>nterrupt <strong>S</strong>ub <strong>R</strong>outine and interrupt service routine).</li>\n<li>Subroutines are sections of code you use repeatedly during a program-- they allow you to keep repetitive program sizes smaller by re-using the same code section instead of repeating it everywhere you need it.</li>\n<li>To go to a subroutine, use the <code data-display=\"inline\">call #SubroutineLabel</code> instruction.  <code data-display=\"inline\">call</code> is analogous to triggering an interrupt.  Call works in practice a lot like just jumping to the label, but it also pushes the PC onto the stack (like an ISR) so you can return to wherever you may have left off (since multiple places in code can call the same subroutine).</li>\n<li>At the end of your subroutine, use a <code data-display=\"inline\">ret</code> (<strong>ret</strong>urn) instruction to pop the PC off the stack and go back to the original execution point of the main program.  This is analogous to the <code data-display=\"inline\">reti</code> instruction at the end of an ISR.</li>\n<li><div data-type=\"note\" id=\"eip-id1170113671825\" data-label=\"warning\" data-element-type=\"warning\">Calling a subroutine on the MSP430 <strong>ONLY</strong> saves the PC, not the status register like an ISR.  You can use subroutines to encapsulate complicated logic, and then examine the conditions afterwords in your main program.</div></li>\n\n<li>There is a <strong>slight</strong> performance trade off when using subroutines from the overhead involved with storing the PC and moving to a new section in memory, so use them intelligently.</li>\n\n<li>A simple subroutine to demonstrate call and return:\n<code id=\"eip-id1165377336376\" data-display=\"block\">&lt;Your Other Code...&gt;\n    call #Sub220\n    &lt;Your Other Other Code...&gt;\n\nSub220  add R4, R5\n        inv R5\n        ret\n</code>\n</li></ul></div></section></section><section data-depth=\"1\" id=\"eip-101\"><h3 data-type=\"title\">Interrupt Assignment Detail</h3><p id=\"eip-676\">Your task is to create a simple MSP430 assembly program using CCS4 and the MSP430 LaunchPad to output a stored value to the 7-segment display. Your program should be <strong>interrupt driven</strong>, and triggering an interrupt on switch 4 (Pin 1.3/LaunchPad Pushbutton S2) should store and output a new output value corresponding to the state of switches 1-3. Changing switches 1-3 should <strong>not effect the output until toggling switch 4</strong>.  Your program should consist of:\n</p><ul id=\"eip-id1171674061743\"><li>\nA setup section that configures the GPIO pins and enables interrupts.\n</li>\n<li>\nAn infinite main loop that does nothing (the <strong>N</strong>o <strong>Op</strong>eration instruction <code data-display=\"inline\">nop</code> could come in handy).\n</li>\n<li>\nAn ISR that takes the new inputs and writes them to the output before returning to the main loop.\n</li>\n</ul>\n\n\n</section><p id=\"eip-253\">Interrupt Diagrams Courtesy of TI document slau144e, \"MSP430 User's Guide.\"</p>\n</body>\n\n</html>", "subjects": ["Science and Technology"], "legacy_id": "m37217", "parentId": null, "resources": [{"media_type": "text/xml", "id": "563315856be554d1024f5c98de61c814cb323cdf", "filename": "index.cnxml"}, {"media_type": "image/png", "id": "9ca303acc22aa85314307be56c51baca81e4b178", "filename": "Lab4 Fill Order.png"}, {"media_type": "text/xml", "id": "a60215b60ab3a7a3ca91c720683a3c874bfd8b0a", "filename": "index.cnxml.html"}, {"media_type": "image/png", "id": "dae8a4633a19d0e6c0d6eb6fdde6e1cca2354559", "filename": "MSP430 Interrupt Execution.png"}], "publishers": [{"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}], "parent": {"authors": [], "shortId": null, "version": "", "id": null, "title": null}, "stateid": 1, "parentTitle": null, "shortId": "X1DVtczv", "authors": [{"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}], "parentVersion": "", "legacy_version": "1.2", "licensors": [{"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}], "language": "en", "license": {"url": "http://creativecommons.org/licenses/by/3.0/", "code": "by", "version": "3.0", "name": "Creative Commons Attribution License"}, "created": "2010-12-15T16:58:00Z", "doctype": "", "buyLink": null, "submitter": {"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}, "baked": null, "parentAuthors": [], "history": [{"changes": "This update brings the module in line with the Connexions best practices and improves the clarity of the assignment.", "version": "2", "revised": "2011-08-16T18:55:25Z", "publisher": {"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}}, {"changes": "First Working Revision.  Translation and clarification of the original Elec 220 labs.", "version": "1", "revised": "2011-03-21T19:53:24Z", "publisher": {"surname": "Johnson", "suffix": "", "firstname": "Matthew", "title": "", "fullname": "Matthew Johnson", "id": "mwjhnsn"}}]}