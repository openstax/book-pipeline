<html xmlns="http://www.w3.org/1999/xhtml">
<head xmlns:c="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml"><title>Putting It All Together: An Interrupt Driven MSP430 Project</title><meta name="created-time" content="2011/05/24 16:09:14.679 GMT-5"/><meta name="revised-time" content="2011/08/16 14:01:14.609 GMT-5"/><meta name="author" content="mwjhnsn"/><meta name="acl-list" content="mwjhnsn"/><meta name="licensor" content="mwjhnsn"/><meta name="license" content="http://creativecommons.org/licenses/by/3.0/"/><meta name="keywords" content="Cavallaro, Cycle, Display, Elec 220, GPIO, Interrupt, MSP430, Project"/><meta name="subject" content="Science and Technology"/></head>

<body xmlns="http://www.w3.org/1999/xhtml" xmlns:c="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml" xmlns:qml="http://cnx.rice.edu/qml/1.0" xmlns:mod="http://cnx.rice.edu/#moduleIds" xmlns:bib="http://bibtexml.sf.net/" xmlns:data="http://www.w3.org/TR/html5/dom.html#custom-data-attribute" data-cnxml-to-html-ver="1.3.3"><div data-type="document-title">Putting It All Together: An Interrupt Driven MSP430 Project</div><div data-type="abstract">This Lab Module has the project outline for a simple assembly display program.  The program is interrupt driven and combines GPIO, polling, and interrupt concepts.</div>
  
<section data-depth="1" id="eip-345"><h3 data-type="title">A More Complicated Assembly Program</h3><p id="eip-606">By now you already have all of the tools you need to complete this assignment.  Remember what you have learned about <a href="/contents/06ca2321-54e8-4f28-8516-f38c8e39cac7" target="_window"> MSP430 assembly language</a>, <a href="/contents/e537c09a-406c-47a7-bfc8-fc34ff9c878b" target="_window">setting up GPIO</a>, and <a href="/contents/5f50d5b5-ccef-4fd0-959b-2fa90bf01a53" target="_window">using interrupts</a>. 
</p><ol id="eip-id1166551859943" type="1"><li>
Coding in MSP430 assembly, <strong>implement an interrupt driven number sequence recorder</strong>.  You will use the same input configuration from last week (get data from pins 1-3 on an interrupt from pin 4), but now will output a readable loop of the last 5 received numbers in order.  <a href="#eip-872">Assignment Details</a>
</li>
</ol></section><section data-depth="1" id="eip-872"><h3 data-type="title">Part II Assignment Detail</h3><p id="eip-32">Your task is to write an assembly program to display a programmable sequence of 5 numbers on the MSP430 LaunchPad.  
</p><ul id="eip-id1167920060578" data-bullet-style="none"><li>You should use five slots to store the input numbers.</li>
<li>Since our simple LaunchPad setup only has one display, you will have to rotate through each of the five numbers after a "short" (in human terms) delay.</li>
<li>Use an ISR to store a new number in the "next" slot. (Next not necessarily meaning what is currently being displayed).  The input should go from slot 1 to 2 to 3... etc. regardless of which slot is currently being output.</li>
<li>The program should only display a slot after a number has been input into it.  You will need to keep track of which slots have been filled.</li>
</ul><figure id="eip-id1164840801766"><figcaption>Only grey boxes are output to the display.  Also, notice how after filling all five slots, the ISR loops back and starts filling from the beginning.</figcaption><span data-type="media" id="eip-id1164843348091" data-alt="Slot fill chart-- shows how the slots should be filled sequentially.">
<img src="/resources/9ca303acc22aa85314307be56c51baca81e4b178/Lab4 Fill Order.png" data-media-type="image/png" alt="Slot fill chart-- shows how the slots should be filled sequentially."/>
</span>
</figure><p>

Your program should consist of:
</p><ul id="eip-id1170473653505"><li>A setup routine that readies all the components of your program.</li>
<li>A main loop that displays the stored numbers one after the other with a readable delay in between.</li>
<li>An ISR that stores each new input number to the appropriate slot.</li>

</ul><div data-type="list" id="eip-847"><div data-type="title">A Few Hints:</div><ul data-bullet-style="none"><li>The MSP430 operates at ~13MHz, which may seem slow in terms of computers, but is much too fast for the human eye to process (~30Hz).  You will have to implement a very significant delay in between number changes.</li>
<li>One way to generate a naive delay is a long loop which does nothing.  You may even need to use a nested loop depending on how long of a delay you need.
<p id="eip-id1164839715520">Nested Loop Example in C:</p>
<code id="eip-id1165354492760" data-display="block">
int i=0;
int j=0;
for (i=0; i&lt;bigNumber; i=i+1)
{
   for(j=bigNumber; j&gt;0; j=j-1)
   {
       &lt;!--This code will run ixj times--&gt;;
    }
}
</code>

</li>
<li>You may find it convenient to put your five slots in RAM instead of using registers. You can then store a memory address in the register, and then increment it or set it as needed.  You will need to use indirect addressing mode though.
<code id="eip-id1167123602847" data-display="block">
mov R4, 0(R15); moves the contents of R4 to the address in R15

</code>

<code id="eip-id1167099051671" data-display="block">
mov 0(R15), R4; moves the contents of the address in R15 into R4
mov &amp;0x0200, R4; moves the contents of memory address 0x0200 into R4
</code>
</li>
<li>Consider where it may be useful to implement parts of your program in subroutines</li></ul></div></section><section data-depth="1" id="eip-397"><h3 data-type="title">Wrapup</h3><p id="eip-802">Congratulations on completing lab 4!  Your program sophistication has dramatically increased.  You understand the basics of <strong>interrupt driven programming</strong>, and know how to use assembly level <strong>subroutines</strong>.  You have had to keep track of <strong>data</strong> as well as design a responsive I/O interface to the outside world. Keep up the good work!</p></section><p id="eip-198">Labs based on the original Elec 220 labs maintained by Michael Wu.</p><p id="eip-427">Images from original lab documents by Yang Sun. Modified by Matt Johnson.</p>
</body>

</html>