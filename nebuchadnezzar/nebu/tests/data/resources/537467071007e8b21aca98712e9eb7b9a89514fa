<html xmlns="http://www.w3.org/1999/xhtml">
<head xmlns:c="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml"><title>A Student to Student Intro to IDE Programming and CCS4</title><meta name="created-time" content="2010/08/09 14:25:38 GMT-5"/><meta name="revised-time" content="2011/03/08 18:15:12.687 US/Central"/><meta name="license" content="http://creativecommons.org/licenses/by/3.0/"/><meta name="keywords" content="CCSv4, Code Composer Studio, ELEC 220, IDE, MSP 430"/><meta name="subject" content="Science and Technology"/></head>

<body xmlns="http://www.w3.org/1999/xhtml" xmlns:c="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml" xmlns:qml="http://cnx.rice.edu/qml/1.0" xmlns:mod="http://cnx.rice.edu/#moduleIds" xmlns:bib="http://bibtexml.sf.net/" xmlns:data="http://www.w3.org/TR/html5/dom.html#custom-data-attribute" data-cnxml-to-html-ver="1.3.3"><div data-type="document-title">A Student to Student Intro to IDE Programming and CCS4</div><div data-type="abstract">A basic introduction to how to write and debug programs in Code Composer Studio V4.</div>
      <p id="id1165051615591">Firstly, this is by no means a comprehensive guide, but a few basics for students who have not been exposed to working in an IDE before. To look more closely at CCS4, see the help docs on ti.com (<a href="http://processors.wiki.ti.com/index.php/Category:Code_Composer_Studio_v4">http://processors.wiki.ti.com/index.php/Category:Code_Composer_Studio_v4</a>)</p>
      <section data-depth="1" id="id1165048214931"><h3 data-type="title">What is an IDE:</h3>
        <p id="id1165034487698">IDE stands for &#8220;Integrated Development Environment,&#8221; and the philosophy behind creating an IDE is to combine all of the separate tools you would need to write, debug, and deploy code into one consistent program. Basically, CCS4 allows you to write code (in C, C++, or assembly) and push a single button to compile, assemble, link, and upload your code to the device (in our case the MSP430). CCS4 also has a built in debugger that launches when you run in debug mode, interfacing in real time with the hardware (through JTAG) and allowing you to see if your code does what you think it should do. Ultimately though, a sophisticated IDE is only a tool that allows you to write clean code more quickly&#8212;it will not code for you and relies on you the programmer to use it and take advantage of its potential.</p>
        <section data-depth="2" id="id1165044796062"><h4 data-type="title">CCS4 and Eclipse:</h4>
          <p id="id1165042209139">CCS4 is TI&#8217;s embedded specialty version of the eclipse framework. The eclipse IDE was developed open source for Java, and you will most likely see it again if you pursue higher level programming courses. Code Composer takes the framework given by Eclipse and tailors it to TI&#8217;s embedded processors and the real time needs of DSP. The things you learn about working in an Eclipse based work environment (or any sophisticated IDE) should help you efficiently write and debug code in the future. Eclipse is <u data-effect="underline">highly</u><u data-effect="underline">customizable</u>. You can create different <strong data-effect="bold">perspectives</strong> (see control buttons upper right hand corner) with different information views. Check out the &#8220;view&#8221; and &#8220;window&#8221; menus to explore different panes you can use.</p>
        </section>
        <section data-depth="2" id="eip-572"><h4 data-type="title">Licenses</h4><p id="eip-772">When you first open CCS4 on a computer, you will have to add the license server information (if you are a student using a university network license) or specify the location of the individual license file.
</p></section><section data-depth="2" id="id1165027671275"><h4 data-type="title">Workspaces and Projects:</h4>
          <p id="id1165045770469">When you first start up CCS4, it will ask you to specify a <strong data-effect="bold">workspace</strong>. This file directory is where CCS4 will save all of your raw C and asm files, as well as the compiled and linked executables before uploading them to the hardware. Inside your workspace, the Eclipse environment divides your files into projects. Each project has its own independent source files and configuration properties. In general, each lab you will complete for this class will be setup as a new project. One project at a time can be set as the &#8220;Active project&#8221; (by default it is the most recently created one. You can view and edit files from any project at any time, but pressing the debug button will compile and load the code for the active project, not necessarily what you think you are working on!). </p>
        </section>
        <section data-depth="2" id="id1165035147870"><h4 data-type="title">Setting up a new project:</h4>
          <p id="id1165043911254">To start setting up a new project, go to the New project wizard (file&#8594; new &#8594; CCS Project). The first step asks you for a project <strong data-effect="bold">name</strong>&#8212;enter one you like! In the next window, it asks to select a project type. In this lab we will be using the <strong data-effect="bold">MSP430</strong>, so select it from the drop down menu and click next. (Don&#8217;t worry about the build configurations, <strong data-effect="bold">the defaults are fine</strong>). The next window asks about project dependencies&#8230; in other words, does your project need to reference functions and files already in another project. Most likely for this class you won&#8217;t have any, so again<strong data-effect="bold">, leave this as is</strong> and click next. Now you have arrived at the most important section. This page configures the device specific compiler and assembler. For the &#8220;Device Variant,&#8221; select our chip, the <strong data-effect="bold">MSP430G2231. </strong>  Lastly, If you are working on one of the earlier labs with only assembly code, <strong>be sure to continue to the next menu and select the "Empty Assembly Only Project" template. </strong>  This tells the IDE not to invoke the compiler and skip straight to assembling and linking. If you forget to set this option, the compiler will throw an error that it cannot find the required c function &#8220;void main()&#8221; in your assembly code. Don&#8217;t worry&#8212; if you mess something up, you can create a new project and just copy your code straight over.</p>
        </section>
      </section>
      <section data-depth="1" id="id1165037880582"><h3 data-type="title">The code perspective and writing code</h3>
        <p id="id1165043699024"> Code Composer supports assembly code, &#8220;classic&#8221; C, and C++. For this class we will focus on assembly code and standard C. Most of your coding will happen in the coding perspective, a view where the screen is dominated by a massive text editing window. Code Composer&#8217;s editor can be setup in a range from straight forward wyswig to auto-tabbing, auto-highlighting, and auto-completing. Again, explore the options (window&#8594;preferences) and find what works best for you and your lab partner.</p>
        <section data-depth="2" id="id1165027637927"><h4 data-type="title">Writing Assembly:</h4>
          <p id="id1165032467775">To write assembly in Code Composer, you first need to create a new project following the steps above (be sure to select &#8220;<strong data-effect="bold">Empty Assembly-only Project</strong>&#8221;!). Once you have your empty project, insert a new file (file &#8594; new &#8594; file). When you input the file name, <u data-effect="underline">be sure</u> to give it an &#8220;<strong data-effect="bold">.asm</strong>&#8221; extension. Now that you have your freshly created asm file, you can start writing code in the code window (the big blank white space in the middle of the screen). In assembly mode, code composer parses the column most left as labels, so any non-label code must be indented at least one tab (and conversely labels cannot be indented). You will learn more about the specific components required for a functional assembly file in your specific labs, but in general, you need five common lines. The first, &#8220;.cdecls C, LIST, &#8220;msp430g2231.h&#8221;&#8221; defines all of your programming constants (such as P1IN, WDTCTL, etc.). The second &#8220;.text&#8221; tells the assembler where your actual code begins. The label &#8220;RESET&#8221; goes at the start of your program so the hardware knows where to begin code execution after a power reset. At the end of your code, you need to leave the memory address of your reset label. To do this, use the command [.sect &#8220;.reset&#8221;] to tell the compiler you are in the reset section, and then [.word RESET] to place the address of the RESET label into memory. </p>
        </section>
        <section data-depth="2" id="id1165040112593"><h4 data-type="title">Writing C:</h4>
          <p id="id1165042267919"> Code composer really shines writing C and C++. Like in assembly, you will need to create a new project for your new program. This time leave &#8220;treat as an assembly-only project&#8221; unchecked. Now you will create a new &#8220;c source file&#8221; (file&#8594; new &#8594; source file). When you input the file name this time, be sure to give it a &#8220;<strong data-effect="bold">.c</strong>&#8221; extension. In c mode, you don&#8217;t have to worry about line spacing or tabbing for the functionality of the program, just your own sanity and code readability. To include the file you used in the .asm projects that defined all the hardware constants, put the line &#8220;<strong data-effect="bold">#include &#8220;msp430g2231.h&#8221; </strong>&#8221; at the top of your code. You won&#8217;t have to worry about the reset vector or anything like that&#8212;the c compiler will take care of it all for you. The only thing actually required in your c program is the function &#8220; <strong data-effect="bold">void main() {&#8230;</strong><em data-effect="italics">YOUR CODE&#8230;</em><strong data-effect="bold">} </strong>&#8221;. Other more advanced operations (like interrupts) require special c syntax, but you will cover that in the specific labs when it comes up.</p>
        </section>
        <section data-depth="2" id="id1165027554145"><h4 data-type="title">Debug Mode, Stepping, Breakpoints, and Watches</h4>
          <p id="id1165041782964">Debug mode differentiates an IDE like CCS4 from simpler command line tools. For better or for worse, simply pressing the debug button magically translates your source code into a running program on your attached MSP430. You will notice that after the debugger finally starts up though, your code will not actually be running. This is because the debugger starts in <strong data-effect="bold">step</strong> mode with the first line of your code highlighted. In other words, the hardware is waiting for you to let it execute that one line of code, so your slow human reflexes can process and verify what it can do in a fraction of a second. Stepping through your code one line at a time helps you find subtle errors and see exactly where a program goes off track. Yes, as you can imagine, simply stepping through a real world multi-thousand line program (or the larger programs you will write later in this course) is inefficient and unfeasible. <strong data-effect="bold">Breakpoints</strong> allow you to tell the debugger to stop if/when the processor gets to a certain point in your code, letting you run quickly through the code you trust and only stop at certain problematic sections you want to look into more closely. You can set several breakpoints at once, and once the program has broken, you will be able to actively see all register and memory values and step through line by line just as if you had started step mode at your break point. <strong data-effect="bold">Watches</strong> are a little bit more abstract and more useful for larger programs, but they allow you to set a watch on a particular variable (in c) or memory location/register (in asm) and only break the program when it tries to change that particular value. This can help you find where exactly where and when a value changes into an erroneous state. </p>
          <p id="id1165049219562">Using a combination of breakpoints, watches, and careful stepping, you can pick apart any complicated program to hunt down errors and really understand what goes on during the program&#8217;s execution. </p>
          
        </section>
      </section>
  </body>

</html>