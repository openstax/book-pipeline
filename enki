#!/usr/bin/env bash

# Wraps the docker execution in a nice bow

set -e

# Trace if TRACE_ON is set
[[ $TRACE_ON ]] && set -x && export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '

# If a symlink was used to run this script then detangle the symlink
if [[ -L $0 ]]; then
    if [[ $(command -v readlink) ]]; then
        actual_file=$(readlink -f "$0")
    else
        # MacOS may not have readlink
        actual_file="$(dirname "$0")/$(find "$(dirname "$0")" -name "$(basename "$0")" -ls | awk -F'-> ' '{print $NF}')"
    fi
else
    actual_file=$0
fi
root_dir="$(cd "$(dirname "$actual_file")" && pwd)"
readonly root_dir


current_dir=$(pwd)
if [[ $DOTENV_PATH ]]; then
    [[ $DOTENV_PATH != /* ]] && DOTENV_PATH=$(cd "$current_dir/$(dirname "$DOTENV_PATH")" && pwd)
elif [[ -f "$current_dir/.env" ]]; then
    DOTENV_PATH="$current_dir/.env"
else
    DOTENV_PATH="$root_dir/.env"
fi

rexpreview_port=12931

# Parse .env file if it exists
# https://gist.github.com/mihow/9c7f559807069a03e302605691f85572#gistcomment-3699759
[[ -f $DOTENV_PATH ]] && {
    # shellcheck disable=SC2046
    export $(echo $(cat $DOTENV_PATH | sed 's/#.*//g' | awk '{printf "%s ",$0} END {print ""}' | xargs))
}

# Trace if TRACE_ON is set
[[ $TRACE_ON ]] && set -x && export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '


check_docker() {
    # Books use more memory than Docker's default. Check if it is low and inform the user
    hyperkit_file="$HOME/Library/Containers/com.docker.docker/Data/vms/0/hyperkit.json"
    if [[ -f "$hyperkit_file" ]]
    then
        too_small=0

        # If jq is installed then we can use it
        if [[ $(command -v jq) ]]
        then
            memory_size=$(jq .memory < "$hyperkit_file")
            [[ ! $memory_size -gt 2048 ]] && too_small=1
        else
            # Otherwise, just use a string search and hope that we find it
            [[ $(grep '"memory":2048,' "$hyperkit_file") != '' ]] && too_small=1
        fi

        if [[ $too_small == 1 ]]
        then
            >&2 echo ""
            >&2 echo "===================================================================="
            >&2 echo "WARNING: Docker seems to be configured for a small amount of memory."
            >&2 echo "Consider expanding it by following the instructions here:"
            >&2 echo "  https://docs.docker.com/docker-for-windows/#resources"
            >&2 echo "===================================================================="
            sleep 5
        fi
    fi
}
check_docker

show_help() {
    has_github_credentials=no
    set +x
    [[ $GH_SECRET_CREDS ]] && has_github_credentials=yes
    [[ $TRACE_ON ]] && set -x

    cat << EOF

    Required Arguments:

        --command all-git-pdf       Command/Step to run. Can be a shortcut like all-git-pdf or all-git-web)

    Optional Arguments:

        --help                      This help page
        --version                   The version of enki

        --clear-data                Remove the date directory before running
        --keep-data                 Keep the data directory before running
        --data-dir <path>           Path to store temporary files
        --dotenv-file <path>        Path to dotenv file (for GitHub credentials)

        --repo osbooks-mybook       The name of the repo. Can be "owner/name" if the owner is not openstax
        --book-slug calculus-vol-1  Which book (identified by slug) to build
        --style <name|"default">    A recipe style to use or "default" to use what is defined in the repo
        --ref <branch|tag|@commit>  Which version of the book to build

        --start-at git-bake         Step to start at (also sets --keep-data)
        --stop-at git-bake          Step to stop at

        --sideload-book <path>      A local path to a cloned git repo instead of fetching from GitHub
        --sideload-cookbook <path>  Path to a locally cloned cookbook

    Status:

        GitHub Credentials? $has_github_credentials
        Cache folder location: $data_dir
        Dotenv file location: $DOTENV_PATH
        Docker image name: $image_name

        Repo: $arg_repo
        Slug: $arg_book_slug
        Ref: $arg_ref
        Style: $arg_style

EOF
}

show_version() {
        cat << EOF

Enki: $(cd "$root_dir" && git describe --always --tags --dirty)

Submodule versions:
$(cd "$root_dir" && git submodule)

EOF
}


# Defaults
image_name=enki
if [[ $XDG_DATA_HOME ]]; then
    data_dir=$XDG_DATA_HOME/enki-data # LCOV_EXCL_LINE
else
    data_dir=$HOME/.local/share/enki-data # LCOV_EXCL_LINE
fi


while [ -n "$1" ]; do
    case "$1" in
        --help)
            show_help
            exit 0
        ;;
        --version)
            show_version
            exit 0
        ;;
        --dotenv-file) shift; DOTENV_PATH=$1 ;;
        --clear-data) clear_cache=1 ;;
        --keep-data) clear_cache='' ;;
        --data-dir) shift; data_dir=$1 ;;
        --command) shift; arg_command=$1 ;;
        --sideload-book) shift; SIDELOAD_PATH=$1 ;;
        --style) shift; arg_style=$1 ;;
        --ref) shift; arg_ref=$1 ;;
        --repo) shift; arg_repo=$1 ;;
        --book-slug) shift; arg_book_slug=$1 ;;
        --start-at) shift; clear_cache=''; export START_AT_STEP=$1 ;;
        --stop-at) shift; export STOP_AT_STEP=$1 ;;
        --sideload-cookbook) shift; COOKBOOK_ROOT=$1 ;;
        *)
            echo -e "Invalid argument '$1'"
            show_help
            exit 2
        ;;
    esac
    shift
done

if [[ $arg_command == 'rex-preview' ]]; then
    [[ -d $data_dir/rex-preview ]] || mkdir $data_dir/rex-preview
    pushd $data_dir/rex-preview
    # keep sure we always have the latest IO_JSONIFIED files in contents
    rsync -rlt --delete ../_attic/IO_JSONIFIED/ ./contents/
    [[ -e ./resources ]] || ln -s ../_attic/IO_RESOURCES ./resources
    # remove .rex-preview file extensions to get the TOCs working
    find ./contents -name "*.rex-preview" -type f -exec bash -c 'mv "$1" "${1/.rex-preview/}"' _ {} \;

    echo "Starting up server. Here are URL(s) to visit:"
    for json_filename in "contents/"*.json; do
        # Books do not have a colon in their filename
        if [[ ! $json_filename == *":"* && ! $json_filename =~ ^.*\.toc\.json$ ]]; then
            json_filename=$(basename $json_filename) # remove the contents/ directory name
            uuid_and_ver=${json_filename%.*}
            echo "https://rex-web.herokuapp.com/books/$uuid_and_ver/pages/not-a-valid-page?archive=http://localhost:$rexpreview_port"
        fi
    done

    # try using "python" default command first (e.g. not existing in base MacOS >12.2), if that fails start python3 explicitly
    if command -v python &> /dev/null
    then
        python $root_dir/simple_http_server_cors.py $rexpreview_port
    else
        python3 $root_dir/simple_http_server_cors.py $rexpreview_port
    fi

    popd
    exit 0
fi

if [[ $arg_command == 'local-preview' ]]; then
    [[ -d $data_dir/local-preview ]] || mkdir $data_dir/local-preview
    pushd $data_dir/local-preview >/dev/null
    [[ -e ./contents ]] || cp -r ../_attic/IO_JSONIFIED contents
    [[ -e ./resources ]] || ln -s ../_attic/IO_RESOURCES resources

    echo "To open local preview open files in this directory:"
    echo "cd $data_dir/local-preview/contents"

    popd >/dev/null
    exit 0
fi

[[ $data_dir ]] || ( >&2 echo "ERROR: A local cache directory for the book data was not provided" && exit 111)
[[ $arg_command ]] || ( >&2 echo "ERROR: A command was not provided. Typical examples are 'all-git-pdf' or 'all-git-web' or 'rex-preview'" && exit 111)

[[ $clear_cache && -d $data_dir ]] && rm -rf $data_dir

[[ $CI_TEST ]] || interactive='--interactive'
[[ $CI_TEST ]] || [ -t 0 ] && enable_tty='--tty' # https://serverfault.com/a/753459

# Ensure the directory is created with the current user so docker can chown its files to be the same user
[[ -d $data_dir ]] || mkdir -p "$data_dir"

[[ $arg_repo && ! $arg_book_slug ]] && arg_repo_and_slug="$arg_repo" # This is just used by __CI_KCOV_MERGE_ALL__.
[[ $arg_repo && $arg_book_slug ]] && arg_repo_and_slug="$arg_repo/$arg_book_slug"

# specify a directory to sideload the book from instead of cloning from github
[[ $SIDELOAD_PATH ]] && {
    if [[ -d $SIDELOAD_PATH ]]; then
        echo "Sideloading book from ${SIDELOAD_PATH}"
        abs_dir=$(cd "$SIDELOAD_PATH"; pwd)
        opt_sideload_book_arg="--volume=$abs_dir:/sideload-book/"
    else
        echo "Could not sideload because directory does not exist"
        exit 1
    fi
}

$root_dir/build-dockerfile.sh

[[ $COOKBOOK_ROOT ]] && {
    [[ $COOKBOOK_ROOT != /* ]] && COOKBOOK_ROOT=$(cd $current_dir/$COOKBOOK_ROOT && pwd)
    opt_mount_recipes="--volume=$COOKBOOK_ROOT:/workspace/enki/recipes/"
}

[[ $SKIP_DOCKER_BUILD ]] || {
    DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker build --tag $image_name --file $root_dir/Dockerfile $root_dir/.
}
docker run $interactive $enable_tty \
    $opt_sideload_book_arg \
    --volume="$(cd "$data_dir"/; pwd):/data/" \
    $opt_mount_recipes \
    --env-file $root_dir/cli.env \
    --env TRACE_ON \
    --env CODE_VERSION \
    --env GH_SECRET_CREDS \
    --env AWS_ACCESS_KEY_ID \
    --env AWS_SECRET_ACCESS_KEY \
    --env AWS_SESSION_TOKEN \
    --env GOOGLE_SERVICE_ACCOUNT_CREDENTIALS \
    --env WEB_QUEUE_STATE_S3_BUCKET \
    --env S3_QUEUE \
    --env GDOC_GOOGLE_FOLDER_ID \
    --env CORGI_ARTIFACTS_S3_BUCKET \
    --env PREVIEW_APP_URL_PREFIX \
    --env ARG_S3_BUCKET_NAME \
    --env START_AT_STEP \
    --env STOP_AT_STEP \
    --env LOCAL_SIDELOAD_REPO_PATH \
    --env KCOV_DIR \
    --env __CI_KCOV_MERGE_ALL__ \
    --rm $image_name "$arg_command" "$arg_repo_and_slug" "$arg_style" "$arg_ref"

if [[ $arg_command == *pdf ]]
then
    >&2 echo "The PDF is available near $data_dir/_attic/IO_ARTIFACTS/book.pdf"
fi
